file_path <- "C:/Users/91997/Desktop/Assessment.r/1657875746_day.xlsx"
data <- read_excel(file_path)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
install.packages("randomForest")
library(randomForest)
install.packages("readxl")
library(readxl)
install.packages("caret")
library(caret)
update.packages(ask = FALSE)
install.packages("dplyr")
install.packages("dplyr")
# Specify the path to the Excel file
file_path <- "C:/Users/91997/Desktop/Assessment.r/1657875746_day.xlsx"
# Read the Excel file
data <- read_excel(file_path)
data$dteday <- as.Date(data$dteday)
data$season <- as.factor(data$season)
data$yr <- as.factor(data$yr)
data$mnth <- as.factor(data$mnth)
data$holiday <- as.factor(data$holiday)
data$weekday <- as.factor(data$weekday)
data$workingday <- as.factor(data$workingday)
data$weathersit <- as.factor(data$weathersit)
sum(is.na(data)) # Total number of NA values in the datasets
#####################Step 3: Attributes Distribution and Trends#################
## Monthly Distribution
ggplot(data, aes(x = mnth, y = cnt)) +
geom_bar(stat = "identity", fill = "steelblue") +
xlab("Month") + ylab("Total Bikes Rented") +
ggtitle("Monthly Distribution of Total Bikes Rented")
## Yearly Distribution
ggplot(data, aes(x = yr, y = cnt)) +
geom_bar(stat = "identity", fill = "coral") +
xlab("Year") + ylab("Total Bikes Rented") +
ggtitle("Yearly Distribution of Total Bikes Rented")
## Box Plot for Outliers
ggplot(data, aes(y = temp)) + geom_boxplot() +
ggtitle("Boxplot for Temperature")
###Step 4: Split the Dataset into Train and Test Dataset
set.seed(123) # For reproducibility
trainIndex <- sample(1:nrow(data), 0.8 * nrow(data)) # 80% for training
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
#######Step 5: Create a Model Using the Random Forest Algorithm#############
## Model Using the Random Forest Algorithm
model <- randomForest(cnt ~ . -instant -dteday, data = trainData)
##########Step 6: Predict the Performance of the Model on the Test Dataset#####3
predictions <- predict(model, testData)
performance <- postResample(predictions, testData$cnt)
print(performance)
###To evaluate the model, you could calculate metrics such as Mean Squared Error (MSE), Root Mean Squared Error (RMSE), or Mean Absolute Error (MAE). These metrics provide insight into the model's accuracy.
mse <- mean((predictions - actual)^2)
